#!/usr/bin/env zsh

export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_BIN_HOME="$HOME/.local/bin"

export DOTFILES="$HOME/.config/dotfiles"
export DOTFILES_DATA="$XDG_DATA_HOME/chezmoi"
export DOTFILES_ASSETS="$DOTFILES/assets"

for dir in "$XDG_CACHE_HOME" "$XDG_CONFIG_HOME" "$XDG_DATA_HOME" "$XDG_BIN_HOME" "$DOTFILES_DATA"; do
  [[ -d $dir ]] || mkdir -p "$dir"
done

# ============================================================================
# Helpers
# ============================================================================

# silently determine existence of executable
# $1 name of bin
__nan_has() { command -v "$1" >/dev/null 2>&1; }

__nan_prefer() {
  __nan_has "$1" || {
    [ -n "$SSH_CLIENT" ] && echo "==> WARN: ${1} not found"
    return 1
  }
}

__nan_exec() { ${DRYRUN:+__nan_echo} $@; return ${DRYRUN:+1}; }

# pipe into this to indent
__nan_indent() { sed 's/^/    /'; }

# source a file if it exists
# $1 path to file
__nan_source() { [ -f "$1" ] && . "$1"; }

# require root
__nan_requireroot() {
  [ "$(whoami)" = "root" ] && return 0
  __nan_err "Please run as root, these files go into /etc/**/"
  return 1
}

# require executable
# $1 name of bin
__nan_require() {
  __nan_has "$1" && __nan_status "FOUND: ${1}" && return 0
  __nan_err "MISSING: ${1}"
  __nan_err_ "Please install before proceeding."
  return 1
}

__nan_maybemkdir() {
  if [[ ! -d "$1" ]]; then
    __nan_status "Directory ${1} does not exist."
    if [[ -z "$CI" ]]; then
      read "REPLY?          Create? [y/N] "
      [[ ! $REPLY =~ ^[Yy]$ ]] && return 1
    fi
    mkdir -p -- "$1" && __nan_ok "Created ${1}."
  fi
}

__nan_realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

__nan_same() {
  # http://www.tldp.org/LDP/abs/html/exitcodes.html
  local sourcepath="$1"
  local targetpath="$2"
  if [[ -f "$targetpath" ]] || [[ -d "$targetpath" ]]; then
    local resolvedpath=$(__nan_realpath "$targetpath")
    [[ "$resolvedpath" == "$sourcepath" ]] && {
      __nan_status "${targetpath} already linked to ${resolvedpath}."
      return 0
    }
    __nan_warn "${targetpath} not linked to ${resolvedpath}."
    return 10
  fi
  __nan_status "${targetpath} not found."
  return 20
}

__nan_link() {
  if [[ $1 == '-s' ]]; then
    local dosudo=1
    shift
  fi
  local flags="-svf"
  local dest=${@[-1]}
  local srcs; srcs=( ${@:1:-1} )
  if [[ $dest == */ && ! -d $dest ]]; then
    mkdir -p $dest
  elif [[ ! -d ${dest%/*} ]]; then
    mkdir -p ${dest%/*}
  fi
  for lk in ${srcs[@]}; do
    local src
    case $lk in
      /*) src=$lk ;;
      .)  src="$(__topic_path $TOPIC)" ;;
      *)  src="$(__topic_path $TOPIC)/$lk" ;;
    esac
    if [[ -d $src ]]; then
      if [[ $dest != */ && -d $dest && -L $dest ]]; then
        ${dosudo:+sudo} rm -fv $dest
      fi
    fi
    __nan_exec ${dosudo:+sudo} ln $flags $src $dest
  done
}

__nan_load_all() {
  pass 
}

__ensure_repo() {
  local target=$1
  local dest=$2
  if [[ ! -d $dest ]]; then
    if [[ $target =~ "^[^/]+/[^/]+$" ]]; then
      url=https://github.com/$target
    elif [[ $target =~ "^[^/]+$" ]]; then
      url=git@github.com:$USER/$target.git
    fi
    [[ -n ${dest%/*} ]] && mkdir -p ${dest%/*}
    git clone --recursive "$url" "$dest" || return 1
  fi
}

__load_repo() {
  __ensure_repo "$1" "$2" && source "$2/$3" || >&2 "Failed to load $1."
}

__is_interactive() { [[ $- == *i* || -n $EMACS ]]; }

__os() {
  case $OSTYPE in
    darwin*) echo macos ;;
    linux*) if   [[ -f /etc/arch-release   ]]; then echo arch
            elif [[ -f /etc/debian_version ]]; then echo debian
            fi ;;
  esac
}
# TODO: Is there a better way of doing this?
__os_vers() {
  case $OSTYPE in
    darwin*) $(sw_vers -buildVersion) ;;
  esac
}

# ============================================================================
# Loggers
# ============================================================================

__nan_echo() { printf '          %s\033[0;m\n' "$1"; }
__nan_status() { printf '\033[0;34m==>       %s\033[0;m\n' "$1"; }
__nan_status_() { printf '\033[0;34m          %s\033[0;m\n' "$1"; }
__nan_ok() { printf '\033[0;32m==> OK:   %s\033[0;m\n' "$1"; }
__nan_ok_() { printf '\033[0;32m==>       %s\033[0;m\n' "$1"; }
__nan_err() { printf '\033[0;31m==> ERR:  %s\033[0;m\n' "$1" >&2; }
__nan_err_() { printf '\033[0;31m          %s\033[0;m\n' "$1" >&2; }
__nan_warn() { printf '\033[0;33m==> WARN: %s\033[0;m\n' "$1" >&2; }
__nan_warn_() { printf '\033[0;33m          %s\033[0;m\n' "$1" >&2; }
__nan_usage() { printf '\033[0;34m==> USAGE: \033[0;32m%s\033[0;m\n' "$1"; }
__nan_usage_() { printf '\033[0;29m           %s\033[0;m\n' "$1"; }
